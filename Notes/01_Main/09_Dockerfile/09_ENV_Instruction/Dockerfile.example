FROM hello-world

# The ENV instruction sets the environment variable <key> to the value <value>. This value will be in the environment for all subsequent instructions in the build stage and can be replaced inline in many as well. The value will be interpreted for other environment variables, so quote characters will be removed if they are not escaped. Like command line parsing, quotes and backslashes can be used to include spaces within values.
# EX:
ENV MY_NAME="John Doe"
ENV MY_DOG=Rex\ The\ Dog
ENV MY_CAT=fluffy

# The 'ENV' instruction allows for multiple '<key>=<value>'' ... variables to be set at one time, and the example below will yield the same net results in the final image:
ENV MY_NAME="John Doe" MY_DOG=Rex\ The\ Dog \
    MY_CAT=fluffy

# The environment variables set using 'ENV' will persist when a container is run from the resulting image. You can view the values using 'docker inspect', and change them using 'docker run --env <key>=<value>''

# Environment variable persistence can cause unexpected side effects. For example, setting ENV 'DEBIAN_FRONTEND=noninteractiv'e changes the behavior of 'apt-get', and may confuse users of your image.
# If an environment variable is only needed during build, and not in the final image, consider setting a value for a single command instead:
RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y
# Or use 'ARG', which is not persisted in the final image:

# The ENV instruction also allows an alternative syntax ENV <key> <value>, omitting the =. For example:
ENV MY_VAR my-value
# This syntax does not allow for multiple environment-variables to be set in a single 'ENV' instruction, and can be confusing. For example, the following sets a single environment variable (ONE) with value "TWO= THREE=world":
ENV ONE TWO= THREE=world
# The alternative syntax is supported for backward compatibility, but discouraged for the reasons outlined above, and may be removed in a future release.