*) Dockerignore file:
    -> Before the docker CLI sends the context to the docker daemon, it looks for a file named .dockerignore in the root directory of the context. If this file exists, the CLI modifies the context to exclude files and directories that match patterns in it. This helps to avoid unnecessarily sending large or sensitive files and directories to the daemon and potentially adding them to images using ADD or COPY.
    -> The CLI interprets the .dockerignore file as a newline-separated list of patterns similar to the file globs of Unix shells. For the purposes of matching, the root of the context is considered to be both the working and the root directory. For example, the patterns '/foo/bar' and 'foo/bar' both exclude a file or directory named 'bar' in the 'foo' subdirectory of 'PATH' or in the root of the git repository located at 'URL'. Neither excludes anything else.
    *) Comment:
        -> If a line in .dockerignore file starts with '#' in column 1, then this line is considered as a comment and is ignored before interpreted by the CLI.
    -> Docker also supports a special wildcard string '**' that matches any number of directories (including zero). For example, '**/*.go' will exclude all files that end with '.go' that are found in all directories, including the root of the build context.
    -> You can even use the '.dockerignore' file to exclude the Dockerfile and '.dockerignore' files. These files are still sent to the daemon because it needs them to do its job. But the 'ADD' and 'COPY' instructions do not copy them to the image.
    -> Finally, you may want to specify which files to include in the context, rather than which to exclude. To achieve this, specify '*' as the first pattern, followed by one or more '!' exception patterns.