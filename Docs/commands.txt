=> docker --version (to see locally available docker version)
-> docker pull <image_name> (download latest version of image from docker hub)
-> docker pull <image_name>:<version> (download given version of iamge from docker hub)
-> docker images (to check all the existing images locally)
-> docker run <image_name> (to run the given image if exist locally if not then pull from docker hub and then run it) EX: [docker pull + docker start] || [docker create + docker start]
-> docker run <image_name>:<version> (to run the given image with specific version if exist locally if not then pull from docker hub and then run it)
-> docker run -e <key>=<value> <container_name|id> (set the environment variable while running the container)
-> docker run --net <network_name> <container_name|id> (set the container network while running the container)
-> docker stop <CONTAINER_ID|Container_name> (to stop the running container)
-> docker start <CONTAINER_ID|Container_name> (to start the stopped container)
-> docker ps (to list out all the running container)
-> docker ps -a (to get all the container which are running or which are not running)
-> docker ps --all (to get all the container which are running or which are not running)
-> docker run -p<host_port>:<container_port> <image_name> (to run the container with binding port from host to container port)
-> docker run -p 80:80/<protocol> (run the container on port with given protocol like: 'tcp', 'udp')
-> docker run --name <name_of_the_container> (specify name of the container that you want to run)
-> docker logs <container_id> (to see all the logs that container is producing)
-> docker logs <container_name> (to see all the logs of container by providing the container name that every container have unique name which you can use using 'docker ps')
-> docker exec -it <container_id|name> /bin/bash (get terminal of the running container)
-> docker logs <container_name> | tail (get last part of the logs)
-> docker logs <container_name> -f (stream the logs in live)
=> docker rm <container_id> (to remove container)
=> docker rm -f <container_id> (force remove container)
=> docker rmi <image_id> (to remove image)
=> docker rmi -f <image_id> (force remove image)
-> docker rm <container_id> (Removes a stopped container) 
-> docker rm -f <container_id> (Forces the removal of a running container (uses SIGKILL))
-> docker rmi <image_id> (Removes an image # Will fail if there is a running instance of that image i.e. container) 
-> docker rmi -f <image_id> (Forces removal of image even if it is referenced in multiple repositories, # i.e. same image id given multiple names/tags, # Will still fail if there is a docker container referencing image) 
-> docker inspect <image_id> (to see all the image information and it's metadata)
-> docker run --env <key>=<value> (to change the already set value in image)
-> docker kill <CONTAINER ID> (if by commanding docker stop if container didn't responde and stop the container then we will kill or terminate that container)
-> docker start -a <image_id> (this will start the container, -a(attached) display the output that contain inside the container
)
-> docker image history <image_name> (to see all the history about that image)

*) Help flag:
	-> we can use help flag to get all the list of command that is associated with the docker command
	-> EX:
		-> docker container --help
		-> docker image --help
		-> docker network --help
		-> docker compose --help
		-> ETC...
	-> Example to use those commands like on docker container --help we can found 'logs' command to use logs we will:
		-> docker logs <container_id>
		-> OR: docker container logs <container_id>

*) For Dockerfile
        -> docker build . (build image with no specifying image name with 'Dockerfile' filename on root directory)
        -> docker build -t <image-name:tag(version)> <path-to-dockerfile>
            -> '-t': Specifies the name and optional tag for the image.EX: 'latest', 'v1.0'
            -> <image-name:tag>: The name and tag you want to assign to the image.
            -> <path-to-dockerfile>: The path to the directory containing the Dockerfile.
        -> docker build -t <image-name:tag> -f <Dockerfile-name> <path-to-dockerfile-directory> (Building with a Different Dockerfile Name)
            -> '-f': Specifies the name of the Dockerfile to use if it's not named Dockerfile.
            -> EX: docker build -t roman:test -f .\Dockerfile.example .
        -> docker build -t <image-name:tag> <git-repo-url> (You can build an image directly from a Git repository. Docker will clone the repo, locate the Dockerfile, and build the image.)
        -> docker build --no-cache -t <image-name:tag> <path-to-dockerfile> (Build with Cache Disabling)

*) For docker-compose file:
        => docker-compose up  (to execute docker-compose.yml file,docker-compose is deprecated)
        -> docker-compose -f <file_name>.yaml up (run docker compose with given file name)
        -> docker compose -f <file_name>.yaml up
        => docker-compose up -d
                -> -d : detached
                -> (execute docker-compose.yml and run in background)
        => docker-compose down
        => docker compose down
        => docker compose -f <file_name>.yaml down (to stop and remove the running container, it will also remove the networks)
        -> docker compose -f .\<file_name>.yaml logs (to see all the logs that is running through the given compose file)
        -> docker compose -f .\<file_name>.yaml logs <container_name|id> (to see all the logs that is running to the specific container)
        -> docker compose rm -f .\<file_name>.yaml (to remove stopped container)
